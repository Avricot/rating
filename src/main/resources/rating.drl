package rating

#list any import classes here.doo

import java.util.HashMap;
import java.util.Map;
import org.slf4j.LoggerFactory;
import org.avricot.rating.model.company.Company;
import org.avricot.rating.model.company.Sector;
import org.avricot.rating.model.rating.RatingProperty;
import org.avricot.rating.model.rating.RatingPropertyValue;
import org.avricot.rating.model.rating.Type;
import org.avricot.rating.service.rule.RuleHelper;
import function org.avricot.rating.service.rule.RuleHelper.get;
import function org.avricot.rating.service.rule.RuleHelper.getF;
import function org.avricot.rating.service.rule.RuleHelper.getGlobalValue;


#declare any global variables here;
global HashMap result;
global HashMap<String, Calc> prop;
global Sector sector;
global Company company;
global Map<Integer,RatingPropertyValue> vals;
global RuleHelper helper;


rule "Common rules"
when
	 eval(true)
then
	#moyenne sur année N et N-1 du CA
	result.put("REVENUES_AVG2", get(prop, "INCOME_SALES").avg(2));
	#recupere la valeur du fixed assets (non current) sur annee N
	result.put("FIXED_ASSETS", get(prop, "BALANCE_FIXED_ASSETS"));
	
	result.put("TOTAL_DEBT", get(prop, "BALANCE_LONG_TERM_DEBT").plus(get(prop, "BALANCE_SHORT_TERM_DEBT")));
	result.put("NET_DEBT", get(result, "TOTAL_DEBT").minus(get(prop, "BALANCE_CASH_EQUI")));
	result.put("NET_DEBT_OVER_EBITDA", get(result, "NET_DEBT").div(get(prop, "INCOME_EBITDA")));
	result.put("NET_DEBT_OVER_EBITDA_AVG2", get(result, "NET_DEBT_OVER_EBITDA").avg(2));
	
	result.put("FFO", get(prop, "CASH_FFO"));
	result.put("FFO_OVER_TOTAL_DEBT", get(result, "FFO").div(get(result, "TOTAL_DEBT")));
	
	result.put("RCF", get(result, "FFO").minus(get(prop, "CASH_DIVIDEND_PAID")));
	result.put("RCF_OVER_NET_DEBT", get(result, "RCF").div(get(result, "NET_DEBT")));
	
	
	result.put("REVENUES_AVG2", get(prop, "INCOME_SALES").avg(2));#moyenne sur année N et N-1 du CA
	result.put("FIXED_ASSETS", get(prop, "BALANCE_FIXED_ASSETS"));#recupere la valeur du fixed assets (non current) sur annee N
	
	result.put("SALES_GROWTH", get(prop, "INCOME_SALES").growth());
	result.put("GROSS_MARGIN", get(prop, "INCOME_SALES").minus(get(prop, "INCOME_COGS")));
	result.put("GROSS_MARGIN_PERCENT", get(result, "GROSS_MARGIN").div(get(prop, "INCOME_SALES")).mult(100));
	result.put("EBITDA_MARGIN_PERCENT", get(prop, "INCOME_EBITDA").div(get(prop, "INCOME_SALES")).mult(100));
	result.put("EBIT_MARGIN_PERCENT", get(prop, "INCOME_EBIT").div(get(prop, "INCOME_SALES")).mult(100));
	result.put("NET_INCOME_PERCENT", get(prop, "INCOME_NET_INCOME").div(get(prop, "INCOME_SALES")).mult(100));
	
	result.put("WORKING_CAPITAL", get(prop, "BALANCE_STOCKS_WIP").plus(get(prop, "BALANCE_RECEIVABLES")).minus(get(prop, "BALANCE_PAYABLES")));
	result.put("WORKING_CAPITAL_PERCENT", get(result, "WORKING_CAPITAL").div(get(prop, "INCOME_SALES")).mult(100));
	result.put("WORKING_CAPITAL_DAYS", get(result, "WORKING_CAPITAL").mult(company.getDayNumber()).div(get(prop, "INCOME_SALES")));
	
	result.put("INVENTORIES_DAYS", get(prop, "BALANCE_STOCKS_WIP").mult(company.getDayNumber()).div(get(prop, "INCOME_SALES")));
	result.put("RECEIVABLES_DAYS", get(prop, "BALANCE_RECEIVABLES").mult(company.getDayNumber()).div(get(prop, "INCOME_SALES")));
	result.put("PAYABLES_DAYS", get(prop, "BALANCE_PAYABLES").mult(company.getDayNumber()).div(get(prop, "INCOME_SALES")));
	
	result.put("TOTAL_DEBT", get(prop, "BALANCE_LONG_TERM_DEBT").plus(get(prop, "BALANCE_SHORT_TERM_DEBT")));
	result.put("NET_DEBT", get(result, "TOTAL_DEBT").minus(get(prop, "BALANCE_CASH_EQUI")));
	result.put("TOTAL_DEBT_OVER_EBITDA", get(result, "TOTAL_DEBT").div(get(prop, "INCOME_EBITDA")));
	result.put("NET_DEBT_OVER_EBITDA", get(result, "NET_DEBT").div(get(prop, "INCOME_EBITDA")));
	result.put("NET_DEBT_OVER_EBITDA_AVG2", get(result, "NET_DEBT_OVER_EBITDA").avg(2));
	result.put("EBIT_OVER_INTEREST", get(prop, "INCOME_EBIT").div(get(prop, "INCOME_NET_INTEREST")));
	result.put("TOTAL_DEBT_OVER_EQUITY", get(result, "TOTAL_DEBT").div(get(prop, "BALANCE_EQUITY")).mult(100));
	result.put("TOTAL_DEBT_OVER_TOTAL_DEBT_OVER_EQUITY_INTERMEDIAIRE", get(result, "TOTAL_DEBT").plus(get(prop, "BALANCE_EQUITY")));
	result.put("TOTAL_DEBT_OVER_TOTAL_DEBT_OVER_EQUITY", get(result, "TOTAL_DEBT").div(get(result, "TOTAL_DEBT_OVER_TOTAL_DEBT_OVER_EQUITY_INTERMEDIAIRE")).mult(100));
	
	result.put("FFO", get(prop, "CASH_FFO"));
	result.put("FFO_OVER_NET_DEBT", get(result, "FFO").div(get(result, "NET_DEBT")).mult(100));
	result.put("FFO_OVER_TOTAL_DEBT", get(result, "FFO").div(get(result, "TOTAL_DEBT")).mult(100));
	
	result.put("RCF", get(result, "FFO").minus(get(prop, "CASH_DIVIDEND_PAID")));
	result.put("RCF_OVER_TOTAL_DEBT", get(result, "RCF").div(get(result, "TOTAL_DEBT")).mult(100));
	result.put("RCF_OVER_NET_DEBT", get(result, "RCF").div(get(result, "NET_DEBT")).mult(100));
	
	result.put("FCF", get(prop, "CASH_FCF"));
	result.put("FCF_ADJUSTED", get(result, "FCF").minus(get(prop, "CASH_DIVIDEND_PAID")));
	result.put("FCF_OVER_TOTAL_DEBT", get(result, "FCF").div(get(result, "TOTAL_DEBT")).mult(100));
	result.put("FCF_OVER_NET_DEBT", get(result, "FCF").div(get(result, "NET_DEBT")).mult(100));
	result.put("FCF_ADJUSTED_OVER_TOTAL_DEBT", get(result, "FCF_ADJUSTED").div(get(result, "TOTAL_DEBT")).mult(100));
	result.put("FCF_ADJUSTED_OVER_NET_DEBT", get(result, "FCF_ADJUSTED").div(get(result, "NET_DEBT")).mult(100));
	
	result.put("CASH_OVER_TOTAL_ASSETS", get(prop, "BALANCE_CASH_EQUI").div(get(prop, "BALANCE_TOTAL_ASSETS")).mult(100));
	result.put("CASH_OVER_FIXED_ASSETS", get(prop, "BALANCE_CASH_EQUI").div(get(prop, "BALANCE_FIXED_ASSETS")).mult(100));
	
	result.put("ROA", get(prop, "INCOME_NET_INCOME").div(get(prop, "BALANCE_TOTAL_ASSETS")).mult(100));
	result.put("ROE", get(prop, "INCOME_NET_INCOME").div(get(prop, "BALANCE_EQUITY")).mult(100));
	
	result.put("SALES", get(prop, "INCOME_SALES"));
	result.put("EBITDA", get(prop, "INCOME_EBITDA"));
	result.put("EBIT", get(prop, "INCOME_EBIT"));
	result.put("INTEREST", get(prop, "INCOME_NET_INTEREST"));
	result.put("NET_INCOME", get(prop, "INCOME_NET_INCOME"));
	result.put("CURRENT_RATIO", get(prop, "INCOME_NET_INCOME"));
	result.put("CASH_EQUI", get(prop, "BALANCE_CASH_EQUI"));
	result.put("EQUITY", get(prop, "BALANCE_EQUITY"));
	result.put("CURRENT_RATIO", get(prop, "BALANCE_CURRENT_ASSETS").div(get(prop, "BALANCE_CURRENT_LIABILITIES")));
	result.put("QUICK_RATIO", get(prop, "BALANCE_CURRENT_ASSETS").minus(get(prop, "BALANCE_STOCKS_WIP")).div(get(prop, "BALANCE_CURRENT_LIABILITIES")));
	result.put("CASH_RATIO", get(prop, "BALANCE_CASH_EQUI").div(get(prop, "BALANCE_CURRENT_LIABILITIES")));		

	result.put("CASH_RATIOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", sector);		

end


rule "test sector NPM"
when
	 eval(company.getSector().getName().equals("NMP"))
then
	result.put("NOTE8_FACTOR1_RELIANCE_MERCHANDISING", getGlobalValue(prop, "NPM_FACTOR1_RELIANCE_MERCHANDISING"));
	result.put("NOTE8_FACTOR1_RELIANCE_LARGEST_REGION", getGlobalValue(prop, "NPM_FACTOR1_RELIANCE_LARGEST_REGION"));
	result.put("NOTE8_FACTOR1_PRIMARY_MARKET_POSITION", getGlobalValue(prop, "NPM_FACTOR1_PRIMARY_MARKET_POSITION"));
	result.put("NOTE8_FACTOR1_GLOBAL_MARKET_POSITION", getGlobalValue(prop, "NPM_FACTOR1_GLOBAL_MARKET_POSITION"));
	result.put("NOTE8_FACTOR2_REVENUES", helper.getFork("REVENUES",getF(result,"REVENUES_AVG2")));
	result.put("NOTE8_FACTOR2_FIXED_ASSETS", helper.getFork("FIXED_ASSETS",get(prop,"BALANCE_FIXED_ASSETS").getLastYear()));
	result.put("NOTE8_FACTOR3_NET_DEBT_OVER_EBITDA", helper.getFork("NET_DEBT_OVER_EBITDA",get(result, "NET_DEBT_OVER_EBITDA").getLastYear()));
	result.put("NOTE8_FACTOR3_FFO_OVER_DEBT", helper.getFork("FFO_OVER_DEBT",get(result, "FFO_OVER_TOTAL_DEBT").getLastYear()));
	result.put("NOTE8_FACTOR3_RCF_OVER_NET_DEBT", helper.getFork("RCF_OVER_NET_DEBT",get(result, "RCF_OVER_NET_DEBT").getLastYear()));
	result.put("NOTE8_FACTOR4_FINANCIAL_POLICIES", getGlobalValue(prop, "NPM_FACTOR4_FINANCIAL_POLICIES"));
	result.put("NOTE8_FACTOR5_BUSINESS_RISK_PROFILE", getGlobalValue(prop, "NPM_FACTOR5_BUSINESS_RISK_PROFILE"));
		
	result.put("NOTE20_FACTOR1_RELIANCE_MERCHANDISING", helper.getIndice("CONVERT_8_20", getF(result, "NOTE8_FACTOR1_RELIANCE_MERCHANDISING")));
	result.put("NOTE20_FACTOR1_RELIANCE_LARGEST_REGION", helper.getIndice("CONVERT_8_20", getF(result, "NOTE8_FACTOR1_RELIANCE_LARGEST_REGION")));
	result.put("NOTE20_FACTOR1_PRIMARY_MARKET_POSITION", helper.getIndice("CONVERT_8_20", getF(result, "NOTE8_FACTOR1_PRIMARY_MARKET_POSITION")));
	result.put("NOTE20_FACTOR1_GLOBAL_MARKET_POSITION", helper.getIndice("CONVERT_8_20", getF(result, "NOTE8_FACTOR1_GLOBAL_MARKET_POSITION")));
	result.put("NOTE20_FACTOR2_REVENUES", helper.getIndice("CONVERT_8_20", result.get("NOTE8_FACTOR2_REVENUES")));
	result.put("NOTE20_FACTOR2_FIXED_ASSETS", helper.getIndice("CONVERT_8_20", result.get("NOTE8_FACTOR2_FIXED_ASSETS")));
	result.put("NOTE20_FACTOR3_NET_DEBT_OVER_EBITDA", helper.getIndice("CONVERT_8_20", result.get("NOTE8_FACTOR3_NET_DEBT_OVER_EBITDA")));
	result.put("NOTE20_FACTOR3_FFO_OVER_DEBT", helper.getIndice("CONVERT_8_20", result.get("NOTE8_FACTOR3_FFO_OVER_DEBT")));
	result.put("NOTE20_FACTOR3_RCF_OVER_NET_DEBT", helper.getIndice("CONVERT_8_20", result.get("NOTE8_FACTOR3_RCF_OVER_NET_DEBT")));
	result.put("NOTE20_FACTOR4_FINANCIAL_POLICIES", helper.getIndice("CONVERT_8_20", getF(result, "NOTE8_FACTOR4_FINANCIAL_POLICIES")));
	result.put("NOTE20_FACTOR5_BUSINESS_RISK_PROFILE", helper.getIndice("CONVERT_8_20", getF(result, "NOTE8_FACTOR5_BUSINESS_RISK_PROFILE")));
	
	result.put("NOTE20_FACTOR1_MARKET_POSITION_PONDEREE", getF(result, "NOTE20_FACTOR1_RELIANCE_MERCHANDISING")*0.1F + getF(result, "NOTE20_FACTOR1_RELIANCE_LARGEST_REGION")*0.05F + getF(result, "NOTE20_FACTOR1_PRIMARY_MARKET_POSITION")*0.05F + getF(result, "NOTE20_FACTOR1_GLOBAL_MARKET_POSITION")*0.05F);
	result.put("NOTE20_FACTOR2_SCALE_PONDEREE", getF(result, "NOTE20_FACTOR2_REVENUES")*0.1F + getF(result, "NOTE20_FACTOR2_FIXED_ASSETS")*0.05F);
	result.put("NOTE20_FACTOR3_LEVERAGE_PONDEREE", getF(result, "NOTE20_FACTOR3_NET_DEBT_OVER_EBITDA")*0.1F + getF(result, "NOTE20_FACTOR3_FFO_OVER_DEBT")*0.05F + getF(result, "NOTE20_FACTOR3_RCF_OVER_NET_DEBT")*0.05F);
	result.put("NOTE20_FACTOR4_FINANCIAL_POLICIES_PONDEREE", getF(result, "NOTE20_FACTOR3_RCF_OVER_NET_DEBT")*0.2F);
	result.put("NOTE20_FACTOR5_BUSINESS_RISK_PROFILE_PONDEREE", getF(result, "NOTE20_FACTOR5_BUSINESS_RISK_PROFILE")*0.2F);
		
	result.put("NOTE_FINALE", (getF(result, "NOTE20_FACTOR1_MARKET_POSITION_PONDEREE") + getF(result, "NOTE20_FACTOR2_SCALE_PONDEREE")+ getF(result, "NOTE20_FACTOR3_LEVERAGE_PONDEREE")+getF(result, "NOTE20_FACTOR4_FINANCIAL_POLICIES_PONDEREE")+ getF(result, "NOTE20_FACTOR5_BUSINESS_RISK_PROFILE_PONDEREE"))/8F*20F);
	result.put("NOTE_FINALE_STABILISEE", helper.getFork("EQUIVALENCE_AAA", getF(result, "NOTE_FINALE")).intValue());
		
	result.put("NPM_NOTE_FACTOR1_MARKET_POSITION_STABILISEE", helper.getFork("EQUIVALENCE_AAA_FACTORS", getF(result, "NOTE20_FACTOR1_MARKET_POSITION_PONDEREE")));
	result.put("NPM_NOTE_FACTOR2_SCALE_STABILISEE", helper.getFork("EQUIVALENCE_AAA_FACTORS", getF(result, "NOTE20_FACTOR2_SCALE_PONDEREE")));
	result.put("NPM_NOTE_FACTOR3_LEVERAGE_STABILISEE", helper.getFork("EQUIVALENCE_AAA_FACTORS", getF(result, "NOTE20_FACTOR3_LEVERAGE_PONDEREE")));
	result.put("NPM_NOTE_FACTOR4_FINANCIAL_POLICIES_STABILISEE", helper.getFork("EQUIVALENCE_AAA_FACTORS", getF(result, "NOTE20_FACTOR4_FINANCIAL_POLICIES_PONDEREE")));
	result.put("NPM_NOTE_FACTOR5_BUSINESS_RISK_PROFILE_STABILISEE", helper.getFork("EQUIVALENCE_AAA_FACTORS", getF(result, "NOTE20_FACTOR5_BUSINESS_RISK_PROFILE_PONDEREE"))); 
end

rule "test sector "
when
	Company(sector.getName() == "COUILLE")
then

end